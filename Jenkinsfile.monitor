pipeline {
    agent any

    tools {
        terraform 'terraform-latest'
    }

    parameters {
        string(name: 'SERVER_IP', defaultValue: '', description: 'The IP address of the server to monitor.')
    }

    environment {
        AWS_ACCESS_KEY_ID     = credentials('AWS_ACCESS_KEY_ID')
        AWS_SECRET_ACCESS_KEY = credentials('AWS_SECRET_ACCESS_KEY')
        TF_IN_AUTOMATION      = 'true'
    }

    stages {
        stage('ðŸ”¬ Monitor System') {
            steps {
                timeout(time: 60, unit: 'MINUTES') {
                    script {
                        echo "MONITOR: Starting to monitor server at IP: ${params.SERVER_IP}"
                        def failureDetected = false
                        sleep(45) 
                        
                        while (!failureDetected) {
                            try {
                                def telemetryData = sh(script: "curl --fail -s http://${params.SERVER_IP}:5001/telemetry", returnStdout: true).trim()
                                def predictionResponse = sh(script: "curl --fail -s -X POST -H \"Content-Type: application/json\" -d '${telemetryData}' http://${params.SERVER_IP}:5002/predict", returnStdout: true).trim()
                                
                                def responseJson = readJSON(text: predictionResponse)
                                def failureProb = responseJson.failure_probability
                                echo "Monitoring ${params.SERVER_IP}... Failure Probability: ${(failureProb * 100).round(2)}%"
                                
                                if (failureProb > 0.90) {
                                    failureDetected = true
                                    // This call correctly sets the build status to FAILURE
                                    error("Heimdall Protocol Activated: Failure probability exceeded 90%.")
                                }

                            } catch (Exception e) {
                                echo "MONITOR: Server at ${params.SERVER_IP} is unresponsive. Triggering self-healing."
                                failureDetected = true
                                // This call correctly sets the build status to FAILURE
                                error("Heimdall Protocol Activated: Server is unresponsive.") 
                            }
                            sleep(5)
                        }
                    }
                }
            }
        }
    }
    // =================== FINAL, CORRECTED POST BLOCK ===================
    post {
        // This block now correctly runs ONLY when the build status is FAILURE
        failure {
            script {
                echo "ðŸ”´ SELF-HEALING: Build has FAILED. Initiating recovery protocol."
                echo "STEP 1: Destroying faulty infrastructure..."
                sh 'terraform init'
                sh 'terraform destroy -auto-approve'
                echo "STEP 2: Triggering new build to provision fresh infrastructure..."
                build job: 'heimdall-protocol', wait: false
            }
        }
    }
}

